function initOptions(a, b) {
    $("#serie-cumul").html(i18n.t("chart.cumul")), $("#serie-pratique").html(i18n.t("chart.pratique")), $("#serie-sens").html(i18n.t("chart.sens"));
    var c = new Core;
    if (1 == a.get("nbPratiques") && 1 == a.get("nbSens"));
    else {
        var d, e, f = [];
        $.getJSON("http://www.eco-public.com/api/h7q239dd/counter/channels/" + a.get("idPdc"), function(g) {
            $.each(g, function(h, i) {
                e = "http://www.eco-public.com/api/h7q239dd/data/periode/" + i.id + "/?begin=" + a.get("date").replace(/[-]+/g, "") + "&end=" + moment().add("d", -1).format("YYYYMMDD") + "&step=4", $.getJSON(e, function(e) {
                    d = {}, $.each(e, function(a, b) {
                        b.timestamp = 1e3 * moment.utc(b.date, "YYYY-MM-DD HH:mm:ss").hours(0).minutes(0).seconds(0).unix()
                    }), d.sens = i.sens, d.pratique = i.userType, d.data = c.formatJsonToArray(e, "timestamp", "comptage"), f.push(d), f.length == g.length && makeSeries(f, a, b)
                })
            })
        }), a.get("nbPratiques") <= 1 && a.get("nbSens") <= 1 && $("#serie-selector").remove(), $("#li-cumul").click(function() {
            $("#btn-chart-serie").html(i18n.t("chart.cumul") + ' <span class="caret"></span>'), initChart(b.cumulSerie, b)
        })
    }
}

function makeSeries(a, b, c) {
    var d = new Core;
    if (b.get("nbPratiques") <= 1) $("#li-pratique").remove();
    else {
        var e, f = {},
            g = [];
        $.each(a, function(a, b) {
            e = b.pratique, f.hasOwnProperty("p_" + e) ? $.each(b.data, function(a, b) {
                f["p_" + e][b[0]] = null != f["p_" + e][b[0]] ? f["p_" + e][b[0]] + b[1] : b[1]
            }) : (g.push(e), f["p_" + e] = {}, $.each(b.data, function(a, b) {
                f["p_" + e][b[0]] = b[1]
            }))
        });
        var h, i, j, k = ["#d4d600", "#87888a"];
        c.pratiqueSerie = [];
        for (var l = 0; l < g.length; l++) i = [], h = f["p_" + g[l]], $.each(h, function(a, b) {
            i.push([parseInt(a), b])
        }), j = {
            name: d.getPratiqueName(g[l]),
            color: k[l],
            dataGrouping: {
                enabled: !1
            },
            data: i
        }, c.pratiqueSerie.push(j);
        $("#li-pratique").click(function() {
            $("#btn-chart-serie").html(i18n.t("chart.pratique") + ' <span class="caret"></span>'), initChart(c.pratiqueSerie, c, !0)
        })
    } if (b.get("nbSens") <= 1) $("#li-sens").remove();
    else {
        var m = {},
            n = {};
        $.each(a, function(a, b) {
            1 == b.sens ? 0 == m.length ? $.each(b.data, function(a, b) {
                m[b[0]] = b[1]
            }) : $.each(b.data, function(a, b) {
                m[b[0]] = null != m[b[0]] ? m[b[0]] + b[1] : b[1]
            }) : 0 == m.length ? $.each(b.data, function(a, b) {
                n[b[0]] = b[1]
            }) : $.each(b.data, function(a, b) {
                n[b[0]] = null != n[b[0]] ? n[b[0]] + b[1] : b[1]
            })
        });
        var o, p, q = [],
            r = [];
        $.each(m, function(a, b) {
            q.push([parseInt(a), b])
        }), o = {
            name: i18n.t("chart.sensNumber", "1"),
            color: "#d4d600",
            dataGrouping: {
                enabled: !1
            },
            data: q
        }, $.each(n, function(a, b) {
            r.push([parseInt(a), b])
        }), p = {
            name: i18n.t("chart.sensNumber", "2"),
            color: "#87888a",
            dataGrouping: {
                enabled: !1
            },
            data: r
        }, c.sensSerie = [o, p], $("#li-sens").click(function() {
            $("#btn-chart-serie").html(i18n.t("chart.sens") + ' <span class="caret"></span>'), initChart(c.sensSerie, c, !0)
        })
    }
}

function setChartLanguage(a, b) {
    $.getJSON("./locales/" + a + "/translation.json", function(a) {
        Highcharts.setOptions({
            lang: a.highchart
        }), b()
    })
}

function getChartData(a, b, c) {
    var d = b.model,
        e = new DataModel({
            id: d.get("id")
        });
    e.fetch({
        data: {
            begin: d.get("date").replace(/[-]+/g, ""),
            end: moment().add("d", -1).format("YYYYMMDD"),
            step: a
        },
        success: function(a) {
            var e = 0,
                f = $.map(a.attributes, function(a) {
                    return [a]
                });
            f.splice(f.length - 1, 1);
            var g, h;
            _.each(f, function(a, b) {
                b > 0 && (g = moment(a.timestamp).format("YYYY-MM-DD"), h = moment(f[b - 1].timestamp).format("YYYY-MM-DD"), g === h && (f[b - 1].comptage += a.comptage, f.splice(b, 1))), e += a.comptage, a.timestamp = 1e3 * moment.utc(a.date, "YYYY-MM-DD HH:mm:ss").hours(0).minutes(0).seconds(0).unix(), a.lColor = "0" == moment(a.date, "YYYY-MM-DD HH:mm:ss").format("d") || "6" == moment(a.date, "YYYY-MM-DD HH:mm:ss").format("d") ? "#C4BA02" : "#d4d600"
            });
            var i = new DataModel;
            i.set("comptage", f[f.length - 1].comptage), i.set("date", f[f.length - 1].date), i.set("pratique", d.get("pratique"));
            var j = new DataModel;
            j.set("comptage", e), j.set("date", d.get("date")), j.set("pratique", d.get("pratique"));
            var k = Backbone.Radio.channel("chart");
            k.request("setLastDay", i), k.request("setTotal", j);
            var l = f,
                m = (new Core).formatJsonToArray(l, "timestamp", "comptage");
            b.cumulSerie = [{
                name: " ",
                color: "#d4d600",
                data: m,
                dataGrouping: {
                    enabled: !1
                }
            }];
            initChart(b.cumulSerie, b);
            $(".compDate").on("closeEvent", function(a) {
                if ($("#chartdiv").is(":visible")) {
                    moment($("#dateFin").val(), "DD/MM/YYYY").unix() < moment($("#dateDebut").val(), "DD/MM/YYYY").unix() && ("dateDebut" == a.currentTarget.id ? $("#dateDebut").val(moment($("#dateFin").val(), "DD/MM/YYYY").format("DD/MM/YYYY")) : $("#dateFin").val(moment($("#dateDebut").val(), "DD/MM/YYYY").format("DD/MM/YYYY")));
                    var c = $("#chartdiv").highcharts(),
                        d = 1e3 * moment($("#dateDebut").val(), "DD/MM/YYYY").unix(),
                        e = 1e3 * moment($("#dateFin").val(), "DD/MM/YYYY").unix();
                    b.refreshCalendar = !1, c.xAxis[0].setExtremes(d, e), b.refreshCalendar = !0
                } else console.log("Chart invisible")
            }), $("#chartJ").click(function() {
                var a = $("#chartdiv").highcharts();
                b.refreshCalendar = !1, $.each(a.series, function(a, b) {
                    b.update({
                        dataGrouping: {
                            enabled: !0,
                            forced: !0,
                            units: [
                                ["day", [1]]
                            ]
                        }
                    })
                }), b.refreshCalendar = !0
            }), $("#chartS").click(function() {
                var a = $("#chartdiv").highcharts();
                b.refreshCalendar = !1, $.each(a.series, function(a, b) {
                    b.update({
                        dataGrouping: {
                            enabled: !0,
                            forced: !0,
                            units: [
                                ["week", [1]]
                            ]
                        }
                    })
                }), b.refreshCalendar = !0
            }), $("#chartM").click(function() {
                var a = $("#chartdiv").highcharts();
                b.refreshCalendar = !1, $.each(a.series, function(a, b) {
                    b.update({
                        dataGrouping: {
                            enabled: !0,
                            forced: !0,
                            units: [
                                ["month", [1]]
                            ]
                        }
                    })
                }), b.refreshCalendar = !0
            }), c()
        },
        error: function(a, b, c) {
            console.log(a + " " + b + " " + c)
        }
    })
}

function initChart(a, b, c) {
    var d = {};
    c && (d = {
        column: {
            stacking: "normal"
        }
    });
    var e = $("#chartdiv").highcharts("StockChart", {
        chart: {
            alignTicks: !0,
            type: "column",
            events: {
                redraw: function(c) {
                    var d = (new Core).calculTotal(a, 1e3 * moment(c.currentTarget.xAxis[0].min).unix(), 1e3 * moment(c.currentTarget.xAxis[0].max).unix());
                    if ($("#region-total .header_value").html(numeral(d).format("0,0") + ' <span class="key-value-suffixe">' + i18n.t("table.counts") + "</span>"), b.refreshCalendar) {
                        var e = moment(c.currentTarget.xAxis[0].min + 864e5),
                            f = moment(c.currentTarget.xAxis[0].max);
                        $("#total_period").text(i18n.t("key.total", moment(e).format("DD MMM YYYY"), moment(f).hours(23).minutes(59).format("DD MMM YYYY"))), $("#dateDebut").val(moment(e).format("DD/MM/YYYY")), $("#dateFin").val(moment(f).format("DD/MM/YYYY")), $(".compDate").datepicker("update")
                    }
                }
            },
            pinchType: ""
        },
        credits: {
            enabled: !1
        },
        rangeSelector: {
            enabled: !1
        },
        navigator: {
            maskFill: "rgba(204,204,204,0.3)",
            maskInside: !1,
            outlineColor: "#dbdbdc",
            series: {
                color: "#d4d600",
                lineColor: "#d4d600"
            }
        },
        scrollbar: {
            barBackgroundColor: "#dbdbdc"
        },
        series: a,
        yAxis: {
            opposite: !1
        },
        plotOptions: d,
        xAxis: {
            type: "datetime",
            minRange: 864e5
        }
    });
    if (b.isLoaded) {
        var f = $("#chartdiv").highcharts(),
            g = 1e3 * moment($("#dateDebut").val(), "DD/MM/YYYY").unix(),
            h = 1e3 * moment($("#dateFin").val(), "DD/MM/YYYY").unix();
        b.refreshCalendar = !1, f.xAxis[0].setExtremes(g, h), b.refreshCalendar = !0, console.log(g)
    }
    return b.isLoaded = !0, e
}

function makeMap(a) {
    $("#labelShowPicture").text(i18n.t("map.showPicture")), mode = "MAP", $("#mapdiv").css("height", "320px");
    var b = $(document).width() > 480 ? !0 : !1,
        c = new google.maps.LatLng(a.get("latitude"), a.get("longitude")),
        d = {
            center: c,
            mapTypeControl: !1,
            scrollwheel: !1,
            draggable: b,
            zoom: 15,
            panControl: !1,
            zoomControl: !0,
            scaleControl: !0,
            zIndex: 1e3
        };
    map = new google.maps.Map(document.getElementById("mapdiv"), d); {
        var e = "./assets/images/pin-red-9.png";
        new google.maps.Marker({
            position: c,
            icon: e,
            map: map,
            title: a.get("titre")
        })
    }
    google.maps.event.addDomListener(window, "resize", function() {
        map.panTo(c)
    })
}

function makePicture(a) {
    mode = "PICTURE", $("#labelShowPicture").text(i18n.t("map.showMap")), $("#mapdiv").removeClass("col-xs-12"), $("#mapdiv").removeAttr("style"), $("#mapdiv").addClass("picture"), void 0 == picture ? (console.log(a.get("photos")[0]), $("#mapdiv").empty(), picture = $('<img class="img-responsive center-block" alt="Responsive image" id="pictureElement" />'), picture.attr("src", a.get("photos")[0]), picture.appendTo("#mapdiv")) : ($("#mapdiv").empty(), picture.appendTo("#mapdiv"))
}
var CounterModel = Backbone.Model.extend({
        "default": {
            id: 0,
            titre: "",
            alias: "",
            langue: "",
            date: "",
            photos: "",
            latitude: 0,
            longitude: 0,
            pratique: 0,
            url: ""
        },
        urlRoot: "http://www.eco-public.com/api/[key]/publicpage/"
    }),
    DataModel = Backbone.Model.extend({
        urlRoot: "http://www.eco-public.com/api/h7q239dd/data/periode/"
    }),
    KeyDataModel = Backbone.Model.extend({
        "default": {
            avgJ: 0,
            avgH: 0,
            avgM: 0,
            valMaxJ: 0,
            valMaxH: 0,
            valMaxM: 0,
            dateMaxJ: "",
            dateMaxH: "",
            dateMaxM: ""
        }
    }),
    TableDataModel = Backbone.Model.extend({
        urlRoot: "http://www.eco-public.com/api/h7q239dd/publicpage/stats/"
    }),
    ChartView = Marionette.ItemView.extend({
        template: _.template($("#chartTemplate").html()),
        refreshCalendar: !0,
        isLoaded: !1,
        cumulSerie: null,
        sensSerie: null,
        pratiqueSerie: null,
        onShow: function() {
            var a = i18n.detectLanguage(),
                b = this;
            "undefined" == typeof window.Highcharts ? $.getScript("http://cdnjs.cloudflare.com/ajax/libs/highstock/2.0.4/highstock.js", function() {
                console.log("Missing Highcharts library was loaded."), setChartLanguage(a, function() {
                    getChartData(b.options.step, b, function() {
                        initOptions(b.model, b)
                    })
                })
            }) : setChartLanguage(a, function() {
                getChartData(b.options.step, b, function() {
                    initOptions(b.model, b)
                })
            }), $(document).on("change", ".select-lang", function() {
                a = $("#header-select-lang").val(), setChartLanguage(a, function() {
                    getChartData(b.options.step, b, null)
                })
            }), $(".chartrow").i18n()
        }
    }),
    LastDayView = Marionette.ItemView.extend({
        template: _.template($("#lastDayTemplate").html()),
        className: "keyNumber div-shadow",
        onBeforeRender: function() {
            var a = this.model.get("date"),
                b = this.model.get("comptage"),
                c = moment(a, "YYYY-MM-DD").seconds(0).minutes(0).hours(0).milliseconds(0).unix();
            c === moment().add(-1, "days").seconds(0).minutes(0).hours(0).milliseconds(0).unix() ? this.model.set("date", i18n.t("key.hier")) : this.model.set("date", moment(a, "YYYY-MM-DD").format("dddd DD MMMM YYYY")), this.model.set("comptage", numeral(b).format("0,0") + ' <span class="key-value-suffixe" data-i18n="table.counts"></span>')
        },
        onShow: function() {
            $(".key-value-suffixe").i18n()
        }
    }),
    mode = "MAP",
    map = void 0,
    picture = void 0,
    MapView = Marionette.ItemView.extend({
        template: _.template($("#mapTemplate").html()),
        className: "col-xs-12 divMap",
        onShow: function() {
            this.model.get("photos") && 0 == this.model.get("photos").length ? $("#labelShowPicture").hide() : $("#labelShowPicture").show(), makeMap(this.model);
            var a = this;
            $("#labelShowPicture").click(function() {
                "MAP" === mode ? makePicture(a.model) : makeMap(a.model)
            })
        }
    }),
    MessageView = Marionette.ItemView.extend({
        template: _.template("../tpl/template_message.html"),
        onShow: function() {
            void 0 == this.model.get("message") && $(".messagerow").hide()
        }
    }),
    TableView = Marionette.ItemView.extend({
        template: _.template($("#tableTemplate").html()),
        onShow: function() {
            $("#tablediv").i18n()
        },
        onRender: function() {
            $("#tablediv").i18n()
        },
        onBeforeRender: function() {
            this.model.set("avgJ", numeral(this.model.get("avgJ")).format("0,0")), this.model.set("avgH", numeral(this.model.get("avgH")).format("0,0")), this.model.set("avgM", numeral(this.model.get("avgM")).format("0,0")), this.model.set("dateMaxJ", moment(this.model.get("sDateMaxJ"), "YYYY-MM-DD").format("dddd DD MMMM YYYY"));
            var a = moment(this.model.get("sDateMaxH"), "YYYY-MM-DD").format("DD MMM YYYY");
            this.model.set("dateMaxH", i18n.t("table.semaine", a)), this.model.set("dateMaxM", moment(this.model.get("sDateMaxM"), "YYYY-MM-DD").format("MMMM YYYY")), this.model.set("maxJ", numeral(this.model.get("maxJ")).format("0,0")), this.model.set("maxH", numeral(this.model.get("maxH")).format("0,0")), this.model.set("maxM", numeral(this.model.get("maxM")).format("0,0"))
        },
        initialize: function() {
            var a = this;
            $(".compDate").on("closeEvent", function() {
                $("#tablediv").is(":visible") ? a.model.fetch({
                    data: {
                        begin: 1e3 * moment($("#dateDebut").val(), "DD/MM/YYYY").unix(),
                        end: 1e3 * moment($("#dateFin").val(), "DD/MM/YYYY").hours(23).minutes(59).unix()
                    },
                    success: function() {
                        a.render()
                    },
                    error: function(a, b, c) {
                        console.log(a + " " + b + " " + c)
                    }
                }) : console.log("Table invisible")
            })
        }
    }),
    TitleView = Marionette.ItemView.extend({
        template: _.template($("#titleTemplate").html()),
        onShow: function() {
            for (var a = "", b = this.model.get("logos"), c = 0; c < b.length; c++) a += '<img class="hidden-sm hidden-xs logo img-responsive" src="' + b[c] + '" />';
            $("#logos").html(a);
            var d = this.model.get("langue").toLowerCase();
            "ca" == d && (d = "en"), $("#header-select-lang").val(d), $("#header-select-lang").val() != d && $("#header-select-lang").val("en"), "fr" == d ? $("#img-logo-eco").attr("src", "assets/images/logo_eco_fr2.png") : $("#img-logo-eco").attr("src", "assets/images/logo_eco_en.png")
        }
    }),
    TotalView = Marionette.ItemView.extend({
        template: _.template($("#totalTemplate").html()),
        className: "keyNumber div-shadow",
        onBeforeRender: function() {
            var a = this.model.get("date"),
                b = this.model.get("comptage");
            this.model.set("date", i18n.t("key.total", moment(a, "YYYY-MM-DD").format("DD MMM YYYY"), moment().format("DD MMM YYYY"))), this.model.set("comptage", numeral(b).format("0,0") + ' <span class="key-value-suffixe">' + i18n.t("table.counts") + "</span>")
        }
    }),
    Core = Marionette.Object.extend({
        getPratiqueName: function(a) {
            switch (a) {
                case 1:
                    return i18n.t("pratique.pieton");
                case 2:
                    return i18n.t("pratique.velo");
                case 3:
                    return i18n.t("pratique.chevaux");
                case 4:
                    return i18n.t("pratique.vl");
                case 5:
                    return i18n.t("pratique.bus");
                case 6:
                    return i18n.t("pratique.minibus");
                case 8:
                    return i18n.t("pratique.moto");
                case 9:
                    return i18n.t("pratique.kayak");
                default:
                    return i18n.t("pratique.undefined")
            }
        },
        calculTotal: function(a, b, c) {
            var d = 0;
            return $.each(a, function(a, e) {
                $.each(e.data, function(a, e) {
                    Array.isArray(e) ? e[0] >= b && e[0] < c && (d += e[1]) : e.x >= b && e.x < c && (d += e.y)
                })
            }), d
        },
        formatJsonToArray: function(a, b, c) {
            var d, e = [];
            for (i in a) d = [a[i][b], a[i][c]], e.push(d);
            return e
        }
    });